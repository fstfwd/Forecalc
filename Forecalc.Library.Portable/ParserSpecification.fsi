// Signature file for parser generated by fsyacc
module ParserSpecification

open Ast

type token = 
  | EOF
  | LT
  | LTE
  | GT
  | GTE
  | EQ
  | NOTEQ
  | AMP
  | COLON
  | COMMA
  | BOOLEAN of (bool)
  | R1C1 of (string)
  | SHEETNAME of (string)
  | NAME of (string)
  | STRING of (string)
  | FLOAT of (float)
  | LPAR
  | RPAR
  | MUL
  | DIV
  | EXP
  | PLUS
  | MINUS
type tokenId = 
    | TOKEN_EOF
    | TOKEN_LT
    | TOKEN_LTE
    | TOKEN_GT
    | TOKEN_GTE
    | TOKEN_EQ
    | TOKEN_NOTEQ
    | TOKEN_AMP
    | TOKEN_COLON
    | TOKEN_COMMA
    | TOKEN_BOOLEAN
    | TOKEN_R1C1
    | TOKEN_SHEETNAME
    | TOKEN_NAME
    | TOKEN_STRING
    | TOKEN_FLOAT
    | TOKEN_LPAR
    | TOKEN_RPAR
    | TOKEN_MUL
    | TOKEN_DIV
    | TOKEN_EXP
    | TOKEN_PLUS
    | TOKEN_MINUS
    | TOKEN_end_of_input
    | TOKEN_error
type nonTerminalId = 
    | NONTERM__startstart
    | NONTERM_start
    | NONTERM_Prog
    | NONTERM_Expr
    | NONTERM_Constant
    | NONTERM_Formula
    | NONTERM_UnaryOperation
    | NONTERM_BinaryOperation
    | NONTERM_Ref
    | NONTERM_ExprList
/// This function maps integers indexes to symbolic token ids
val tagOfToken: token -> int

/// This function maps integers indexes to symbolic token ids
val tokenTagToTokenId: int -> tokenId

/// This function maps production indexes returned in syntax errors to strings representing the non terminal that would be produced by that production
val prodIdxToNonTerminal: int -> nonTerminalId

/// This function gets the name of a token as a string
val token_to_string: token -> string
val start : (Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> token) -> Microsoft.FSharp.Text.Lexing.LexBuffer<'cty> -> (Expr) 
